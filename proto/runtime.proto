syntax = "proto3";

option csharp_namespace = "Layotto.Protocol";

package spec.proto.runtime.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

option go_package = "mosn.io/layotto/spec/proto/runtime/v1;runtime";
option java_outer_classname = "RuntimeProto";
option java_package = "spec.proto.runtime.v1";

service Runtime {
  //SayHello used for test
  rpc SayHello(SayHelloRequest) returns (SayHelloResponse) {}

  // InvokeService do rpc calls
  rpc InvokeService(InvokeServiceRequest) returns (InvokeResponse) {}

  // GetConfiguration gets configuration from configuration store.
  rpc GetConfiguration(GetConfigurationRequest) returns (GetConfigurationResponse) {}

  // SaveConfiguration saves configuration into configuration store.
  rpc SaveConfiguration(SaveConfigurationRequest) returns (google.protobuf.Empty) {}

  // DeleteConfiguration deletes configuration from configuration store.
  rpc DeleteConfiguration(DeleteConfigurationRequest) returns (google.protobuf.Empty) {}

  // SubscribeConfiguration gets configuration from configuration store and subscribe the updates.
  rpc SubscribeConfiguration(stream SubscribeConfigurationRequest) returns (stream SubscribeConfigurationResponse) {}

  // Distributed Lock API
  // A non-blocking method trying to get a lock with ttl.
  rpc TryLock(TryLockRequest)returns (TryLockResponse) {}

  rpc Unlock(UnlockRequest)returns (UnlockResponse) {}

  // Sequencer API
  // Get next unique id with some auto-increment guarantee
  rpc GetNextId(GetNextIdRequest)returns (GetNextIdResponse) {}

  //  Below are the APIs compatible with Dapr.
  //  We try to keep them same as Dapr's because we want to work with Dapr to build an API spec for cloud native runtime
  //  ,like CloudEvent for event data.

  // Gets the state for a specific key.
  rpc GetState(GetStateRequest) returns (GetStateResponse) {}

  // Gets a bulk of state items for a list of keys
  rpc GetBulkState(GetBulkStateRequest) returns (GetBulkStateResponse) {}

  // Saves an array of state objects
  rpc SaveState(SaveStateRequest) returns (google.protobuf.Empty) {}

  // Deletes the state for a specific key.
  rpc DeleteState(DeleteStateRequest) returns (google.protobuf.Empty) {}

  // Deletes a bulk of state items for a list of keys
  rpc DeleteBulkState(DeleteBulkStateRequest) returns (google.protobuf.Empty) {}

  // Executes transactions for a specified store
  rpc ExecuteStateTransaction(ExecuteStateTransactionRequest) returns (google.protobuf.Empty) {}

  // Publishes events to the specific topic
  rpc PublishEvent(PublishEventRequest) returns (google.protobuf.Empty) {}

  // Get file with stream
  rpc GetFile(GetFileRequest) returns (stream GetFileResponse) {}

  // Put file with stream
  rpc PutFile(stream PutFileRequest) returns (google.protobuf.Empty) {}

  // List all files
  rpc ListFile(ListFileRequest) returns (ListFileResp){}

  // Delete specific file
  rpc DelFile(DelFileRequest) returns (google.protobuf.Empty){}

  // Get file meta data, if file not exist,return code.NotFound error
  rpc GetFileMeta(GetFileMetaRequest) returns (GetFileMetaResponse){}

  // Invokes binding data to specific output bindings
  rpc InvokeBinding(InvokeBindingRequest) returns (InvokeBindingResponse) {}
}

message GetFileMetaRequest{
    FileRequest request = 1;
}

message GetFileMetaResponse{
    // The size of file
    int64 size = 1;
    // The modified time of file
    string last_modified = 2;
    FileMeta response = 3;
}

message FileMetaValue{
    repeated string value = 1;
}

message FileMeta{
    map<string,FileMetaValue> metadata = 1;
}

message GetFileRequest {
  //
  string store_name = 1;
  // The name of the file or object want to get.
  string name = 2;
  // The metadata for user extension.
  map<string, string> metadata = 3;
}

message GetFileResponse {
  bytes data = 1;
}

message PutFileRequest {
  string store_name = 1;
  // The name of the file or object want to put.
  string name = 2;
  // The data will be store.
  bytes data = 3;
  // The metadata for user extension.
  map<string, string> metadata = 4;
}

message FileRequest {
  string store_name = 1;
  // The name of the directory
  string name = 2;
  // The metadata for user extension.
  map<string, string> metadata = 3;
}

message ListFileRequest {
  FileRequest request = 1;
  int32 page_size = 2;
  string marker = 3;
}

message FileInfo {
  // The name of file
  string file_name = 1;
  // The size of file
  int64 size = 2;
  // The modified time of file
  string last_modified = 3;
  // The metadata for user extension.
  map<string,string> metadata = 4;
}
message ListFileResp {
  repeated FileInfo files = 1;
  string marker = 2;
  bool is_truncated = 3;
}

message DelFileRequest {
  FileRequest request = 1;
}

message GetNextIdRequest {
  // Required. Name of sequencer storage
  string store_name = 1;
  // Required. key is the identifier of a sequencer namespace,e.g. "order_table".
  string key = 2;
  // (optional) SequencerOptions configures requirements for auto-increment guarantee
  SequencerOptions options = 3;
  // (optional) The metadata which will be sent to the component.
  map<string, string> metadata = 4;
}

// SequencerOptions configures requirements for auto-increment guarantee
message SequencerOptions {
  // requirements for auto-increment guarantee
  enum AutoIncrement {
    // (default) WEAK means a "best effort" incrementing service.But there is no strict guarantee of global monotonically increasing.
    //The next id is "probably" greater than current id.
    WEAK = 0;
    // STRONG means a strict guarantee of global monotonically increasing.
    //The next id "must" be greater than current id.
    STRONG = 1;
  }

  AutoIncrement increment = 1;

  //  We removed Uniqueness enum to make it simple.
  // Currently this API will give a "STRONG" guarantee:all the ID returned by this API will be globally unique under the specific key.
  //
  //  enum Uniqueness{
  //    // WEAK means a "best effort" unqueness guarantee.
  //    // But it might duplicate in some corner cases.
  //    WEAK = 0;
  //    // STRONG means a strict guarantee of global uniqueness
  //    STRONG = 1;
  //  }

  //  Uniqueness uniqueness=2;
}

message GetNextIdResponse{
  // The next unique id
  // Fixed int64 overflow problems on JavaScript https://github.com/improbable-eng/ts-protoc-gen#gotchas
  int64 next_id = 1 [jstype = JS_STRING];
}

message TryLockRequest {
  // Required. The lock store name,e.g. `redis`.
  string store_name = 1;

  // Required. resource_id is the lock key. e.g. `order_id_111`
  // It stands for "which resource I want to protect"
  string resource_id = 2;

  // Required. lock_owner indicate the identifier of lock owner.
  // You can generate a uuid as lock_owner.For example,in golang:
  // req.LockOwner = uuid.New().String()
  // This field is per request,not per process,so it is different for each request,
  // which aims to prevent multi-thread in the same process trying the same lock concurrently.
  // The reason why we don't make it automatically generated is:
  // 1. If it is automatically generated,there must be a 'my_lock_owner_id' field in the response.
  // This name is so weird that we think it is inappropriate to put it into the api spec
  // 2. If we change the field 'my_lock_owner_id' in the response to 'lock_owner',which means the current lock owner of this lock,
  // we find that in some lock services users can't get the current lock owner.Actually users don't need it at all.
  // 3. When reentrant lock is needed,the existing lock_owner is required to identify client and check "whether this client can reenter this lock".
  // So this field in the request shouldn't be removed.
  string lock_owner = 3;

  // Required. expire is the time before expire.The time unit is second.
  int32 expire = 4;
}

message TryLockResponse {
  bool success = 1;
}

message UnlockRequest {
  string store_name = 1;
  // resource_id is the lock key.
  string resource_id = 2;

  string lock_owner = 3;
}

message UnlockResponse {
  enum Status {
    SUCCESS = 0;
    LOCK_UNEXIST = 1;
    LOCK_BELONG_TO_OTHERS = 2;
    INTERNAL_ERROR = 3;
  }

  Status status = 1;
}

message SayHelloRequest {
  string service_name = 1;
  string name = 2;
  // Optional. This field is used to control the packet size during load tests.
  google.protobuf.Any data = 3;
}

message SayHelloResponse {
  string hello = 1;
  google.protobuf.Any data = 2;
}

message InvokeServiceRequest {
  string id = 1;
  CommonInvokeRequest message = 3;
}

message CommonInvokeRequest {
  string method = 1;
  google.protobuf.Any data = 2;
  string content_type = 3;
  HTTPExtension http_extension = 4;
}

message HTTPExtension {
  enum Verb {
    NONE = 0;
    GET = 1;
    HEAD = 2;
    POST = 3;
    PUT = 4;
    DELETE = 5;
    CONNECT = 6;
    OPTIONS = 7;
    TRACE = 8;
  }

  Verb verb = 1;

  string querystring = 2;
}

message InvokeResponse {
  google.protobuf.Any data = 1;
  string content_type = 2;
}

// ConfigurationItem represents a configuration item with key, content and other information.
message ConfigurationItem {
  // Required. The key of configuration item
  string key = 1;

  // The content of configuration item
  // Empty if the configuration is not set, including the case that the configuration is changed from value-set to value-not-set.
  string content = 2;

  // The group of configuration item.
  string group = 3;

  // The label of configuration item.
  string label = 4;

  // The tag list of configuration item.
  map<string, string> tags = 5;

  // The metadata which will be passed to configuration store component.
  map<string, string> metadata = 6;
}

// GetConfigurationRequest is the message to get a list of key-value configuration from specified configuration store.
message GetConfigurationRequest {
  // The name of configuration store.
  string store_name = 1;

  // The application id which
  // Only used for admin, Ignored and reset for normal client
  string app_id = 2;

  // The group of keys.
  string group = 3;

  // The label for keys.
  string label = 4;

  // The keys to get.
  repeated string keys = 5;

  // The metadata which will be sent to configuration store components.
  map<string, string> metadata = 6;

  // Subscribes update event for given keys.
  // If true, when any configuration item in this request is updated, app will receive event by OnConfigurationEvent() of app callback
  bool subscribe_update = 7;
}

// GetConfigurationResponse is the response conveying the list of configuration values.
message GetConfigurationResponse {
  // The list of items containing configuration values.
  repeated ConfigurationItem items = 1;
}

// SubscribeConfigurationRequest is the message to get a list of key-value configuration from specified configuration store.
message SubscribeConfigurationRequest {
  // The name of configuration store.
  string store_name = 1;

  // The application id which
  // Only used for admin, ignored and reset for normal client
  string app_id = 2;

  // The group of keys.
  string group = 3;

  // The label for keys.
  string label = 4;

  // The keys to get.
  repeated string keys = 5;

  // The metadata which will be sent to configuration store components.
  map<string, string> metadata = 6;
}

// SubscribeConfigurationResponse is the response conveying the list of configuration values.
message SubscribeConfigurationResponse {
  // The name of configuration store.
  string store_name = 1;

  // The application id.
  // Only used for admin client.
  string app_id = 2;

  // The list of items containing configuration values.
  repeated ConfigurationItem items = 3;
}

// SaveConfigurationRequest is the message to save a list of key-value configuration into specified configuration store.
message SaveConfigurationRequest {
  // The name of configuration store.
  string store_name = 1;

  // The application id which
  // Only used for admin, ignored and reset for normal client
  string app_id = 2;

  // The list of configuration items to save.
  // To delete a exist item, set the key (also label) and let content to be empty
  repeated ConfigurationItem items = 3;

  // The metadata which will be sent to configuration store components.
  map<string, string> metadata = 4;
}

// DeleteConfigurationRequest is the message to delete a list of key-value configuration from specified configuration store.
message DeleteConfigurationRequest {
  // The name of configuration store.
  string store_name = 1;

  // The application id which
  // Only used for admin, Ignored and reset for normal client
  string app_id = 2;

  // The group of keys.
  string group = 3;

  // The label for keys.
  string label = 4;

  // The keys to get.
  repeated string keys = 5;

  // The metadata which will be sent to configuration store components.
  map<string, string> metadata = 6;
}


// GetStateRequest is the message to get key-value states from specific state store.
message GetStateRequest {
  // Required. The name of state store.
  string store_name = 1;

  // Required. The key of the desired state
  string key = 2;

  // (optional) read consistency mode
  StateOptions.StateConsistency consistency = 3;

  // (optional) The metadata which will be sent to state store components.
  map<string, string> metadata = 4;
}

// GetBulkStateRequest is the message to get a list of key-value states from specific state store.
message GetBulkStateRequest {
  // Required. The name of state store.
  string store_name = 1;

  // Required. The keys to get.
  repeated string keys = 2;

  // (optional) The number of parallel operations executed on the state store for a get operation.
  int32 parallelism = 3;

  // (optional) The metadata which will be sent to state store components.
  map<string, string> metadata = 4;
}

// GetBulkStateResponse is the response conveying the list of state values.
message GetBulkStateResponse {
  // The list of items containing the keys to get values for.
  repeated BulkStateItem items = 1;
}

// BulkStateItem is the response item for a bulk get operation.
// Return values include the item key, data and etag.
message BulkStateItem {
  // state item key
  string key = 1;

  // The byte array data
  bytes data = 2;

  // The entity tag which represents the specific version of data.
  // ETag format is defined by the corresponding data store.
  string etag = 3;

  // The error that was returned from the state store in case of a failed get operation.
  string error = 4;

  // The metadata which will be sent to app.
  map<string, string> metadata = 5;
}

// GetStateResponse is the response conveying the state value and etag.
message GetStateResponse {
  // The byte array data
  bytes data = 1;

  // The entity tag which represents the specific version of data.
  // ETag format is defined by the corresponding data store.
  string etag = 2;

  // The metadata which will be sent to app.
  map<string, string> metadata = 3;
}

// DeleteStateRequest is the message to delete key-value states in the specific state store.
message DeleteStateRequest {
  // Required. The name of state store.
  string store_name = 1;

  // Required. The key of the desired state
  string key = 2;

  // (optional) The entity tag which represents the specific version of data.
  // The exact ETag format is defined by the corresponding data store.
  Etag etag = 3;

  // (optional) State operation options which includes concurrency/
  // consistency/retry_policy.
  StateOptions options = 4;

  // (optional) The metadata which will be sent to state store components.
  map<string, string> metadata = 5;
}

// DeleteBulkStateRequest is the message to delete a list of key-value states from specific state store.
message DeleteBulkStateRequest {
  // Required. The name of state store.
  string store_name = 1;

  // Required. The array of the state key values.
  repeated StateItem states = 2;
}

// SaveStateRequest is the message to save multiple states into state store.
message SaveStateRequest {
  // Required. The name of state store.
  string store_name = 1;

  // Required. The array of the state key values.
  repeated StateItem states = 2;
}

// StateItem represents state key, value, and additional options to save state.
message StateItem {
  // Required. The state key
  string key = 1;

  // Required. The state data for key
  bytes value = 2;

  // (optional) The entity tag which represents the specific version of data.
  // The exact ETag format is defined by the corresponding data store. Layotto runtime only treats ETags as opaque strings.
  Etag etag = 3;

  // (optional) additional key-value pairs to be passed to the state store.
  map<string, string> metadata = 4;

  // (optional) Options for concurrency and consistency to save the state.
  StateOptions options = 5;
}

// Etag represents a state item version
message Etag {
  // value sets the etag value
  string value = 1;
}

// StateOptions configures concurrency and consistency for state operations
message StateOptions {
  // Enum describing the supported concurrency for state.
  // The API server uses Optimized Concurrency Control (OCC) with ETags.
  // When an ETag is associated with an save or delete request, the store shall allow the update only if the attached ETag matches with the latest ETag in the database.
  // But when ETag is missing in the write requests, the state store shall handle the requests in the specified strategy(e.g. a last-write-wins fashion).
  enum StateConcurrency {
    CONCURRENCY_UNSPECIFIED = 0;
    // First write wins
    CONCURRENCY_FIRST_WRITE = 1;
    // Last write wins
    CONCURRENCY_LAST_WRITE = 2;
  }

  // Enum describing the supported consistency for state.
  enum StateConsistency {
    CONSISTENCY_UNSPECIFIED = 0;
    //  The API server assumes data stores are eventually consistent by default.A state store should:
    // - For read requests, the state store can return data from any of the replicas
    // - For write request, the state store should asynchronously replicate updates to configured quorum after acknowledging the update request.
    CONSISTENCY_EVENTUAL = 1;

    // When a strong consistency hint is attached, a state store should:
    // - For read requests, the state store should return the most up-to-date data consistently across replicas.
    // - For write/delete requests, the state store should synchronisely replicate updated data to configured quorum before completing the write request.
    CONSISTENCY_STRONG = 2;
  }

  StateConcurrency concurrency = 1;
  StateConsistency consistency = 2;
}

// TransactionalStateOperation is the message to execute a specified operation with a key-value pair.
message TransactionalStateOperation {
  // Required. The type of operation to be executed.
  // Legal values include:
  // "upsert" represents an update or create operation
  // "delete" represents a delete operation
  string operationType = 1;

  // Required. State values to be operated on
  StateItem request = 2;
}
// ExecuteStateTransactionRequest is the message to execute multiple operations on a specified store.
message ExecuteStateTransactionRequest {
  // Required. name of state store.
  string storeName = 1;

  // Required. transactional operation list.
  repeated TransactionalStateOperation operations = 2;

  // (optional) The metadata used for transactional operations.
  map<string, string> metadata = 3;
}

// PublishEventRequest is the message to publish event data to pubsub topic
message PublishEventRequest {
  // The name of the pubsub component
  string pubsub_name = 1;

  // The pubsub topic
  string topic = 2;

  // The data which will be published to topic.
  bytes data = 3;

  // The content type for the data (optional).
  string data_content_type = 4;

  // The metadata passing to pub components
  //
  // metadata property:
  // - key : the key of the message.
  map<string, string> metadata = 5;
}

// InvokeBindingRequest is the message to send data to output bindings
message InvokeBindingRequest {
  // The name of the output binding to invoke.
  string name = 1;

  // The data which will be sent to output binding.
  bytes data = 2;

  // The metadata passing to output binding components
  // Common metadata property:
  // - ttlInSeconds : the time to live in seconds for the message.
  // If set in the binding definition will cause all messages to
  // have a default time to live. The message ttl overrides any value
  // in the binding definition.
  map<string, string> metadata = 3;

  // The name of the operation type for the binding to invoke
  string operation = 4;
}

// InvokeBindingResponse is the message returned from an output binding invocation
message InvokeBindingResponse {
  // The data which will be sent to output binding.
  bytes data = 1;

  // The metadata returned from an external system
  map<string, string> metadata = 2;
}
