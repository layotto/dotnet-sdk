// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: appcallback.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Layotto.Protocol {
  /// <summary>
  /// AppCallback V1 allows user application to interact with runtime.
  /// User application needs to implement AppCallback service if it needs to
  /// receive message from runtime.
  /// </summary>
  public static partial class AppCallback
  {
    static readonly string __ServiceName = "spec.proto.runtime.v1.AppCallback";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.ListTopicSubscriptionsResponse> __Marshaller_spec_proto_runtime_v1_ListTopicSubscriptionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.ListTopicSubscriptionsResponse.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.TopicEventRequest> __Marshaller_spec_proto_runtime_v1_TopicEventRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.TopicEventRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.TopicEventResponse> __Marshaller_spec_proto_runtime_v1_TopicEventResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.TopicEventResponse.Parser));

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Layotto.Protocol.ListTopicSubscriptionsResponse> __Method_ListTopicSubscriptions = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Layotto.Protocol.ListTopicSubscriptionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTopicSubscriptions",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_spec_proto_runtime_v1_ListTopicSubscriptionsResponse);

    static readonly grpc::Method<global::Layotto.Protocol.TopicEventRequest, global::Layotto.Protocol.TopicEventResponse> __Method_OnTopicEvent = new grpc::Method<global::Layotto.Protocol.TopicEventRequest, global::Layotto.Protocol.TopicEventResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OnTopicEvent",
        __Marshaller_spec_proto_runtime_v1_TopicEventRequest,
        __Marshaller_spec_proto_runtime_v1_TopicEventResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Layotto.Protocol.AppcallbackReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AppCallback</summary>
    [grpc::BindServiceMethod(typeof(AppCallback), "BindService")]
    public abstract partial class AppCallbackBase
    {
      /// <summary>
      /// Lists all topics subscribed by this app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Layotto.Protocol.ListTopicSubscriptionsResponse> ListTopicSubscriptions(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribes events from Pubsub
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Layotto.Protocol.TopicEventResponse> OnTopicEvent(global::Layotto.Protocol.TopicEventRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AppCallback</summary>
    public partial class AppCallbackClient : grpc::ClientBase<AppCallbackClient>
    {
      /// <summary>Creates a new client for AppCallback</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AppCallbackClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AppCallback that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AppCallbackClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AppCallbackClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AppCallbackClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists all topics subscribed by this app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.ListTopicSubscriptionsResponse ListTopicSubscriptions(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTopicSubscriptions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all topics subscribed by this app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.ListTopicSubscriptionsResponse ListTopicSubscriptions(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTopicSubscriptions, null, options, request);
      }
      /// <summary>
      /// Lists all topics subscribed by this app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.ListTopicSubscriptionsResponse> ListTopicSubscriptionsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTopicSubscriptionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all topics subscribed by this app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.ListTopicSubscriptionsResponse> ListTopicSubscriptionsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTopicSubscriptions, null, options, request);
      }
      /// <summary>
      /// Subscribes events from Pubsub
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.TopicEventResponse OnTopicEvent(global::Layotto.Protocol.TopicEventRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OnTopicEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribes events from Pubsub
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.TopicEventResponse OnTopicEvent(global::Layotto.Protocol.TopicEventRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OnTopicEvent, null, options, request);
      }
      /// <summary>
      /// Subscribes events from Pubsub
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.TopicEventResponse> OnTopicEventAsync(global::Layotto.Protocol.TopicEventRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OnTopicEventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribes events from Pubsub
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.TopicEventResponse> OnTopicEventAsync(global::Layotto.Protocol.TopicEventRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OnTopicEvent, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AppCallbackClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AppCallbackClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AppCallbackBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListTopicSubscriptions, serviceImpl.ListTopicSubscriptions)
          .AddMethod(__Method_OnTopicEvent, serviceImpl.OnTopicEvent).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AppCallbackBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListTopicSubscriptions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Layotto.Protocol.ListTopicSubscriptionsResponse>(serviceImpl.ListTopicSubscriptions));
      serviceBinder.AddMethod(__Method_OnTopicEvent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.TopicEventRequest, global::Layotto.Protocol.TopicEventResponse>(serviceImpl.OnTopicEvent));
    }

  }
}
#endregion
