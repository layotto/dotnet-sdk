// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: runtime.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Layotto.Protocol {
  public static partial class Runtime
  {
    static readonly string __ServiceName = "spec.proto.runtime.v1.Runtime";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Layotto.Protocol.SayHelloRequest> __Marshaller_spec_proto_runtime_v1_SayHelloRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.SayHelloRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.SayHelloResponse> __Marshaller_spec_proto_runtime_v1_SayHelloResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.SayHelloResponse.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.InvokeServiceRequest> __Marshaller_spec_proto_runtime_v1_InvokeServiceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.InvokeServiceRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.InvokeResponse> __Marshaller_spec_proto_runtime_v1_InvokeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.InvokeResponse.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.GetConfigurationRequest> __Marshaller_spec_proto_runtime_v1_GetConfigurationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.GetConfigurationRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.GetConfigurationResponse> __Marshaller_spec_proto_runtime_v1_GetConfigurationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.GetConfigurationResponse.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.SaveConfigurationRequest> __Marshaller_spec_proto_runtime_v1_SaveConfigurationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.SaveConfigurationRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.DeleteConfigurationRequest> __Marshaller_spec_proto_runtime_v1_DeleteConfigurationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.DeleteConfigurationRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.SubscribeConfigurationRequest> __Marshaller_spec_proto_runtime_v1_SubscribeConfigurationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.SubscribeConfigurationRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.SubscribeConfigurationResponse> __Marshaller_spec_proto_runtime_v1_SubscribeConfigurationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.SubscribeConfigurationResponse.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.TryLockRequest> __Marshaller_spec_proto_runtime_v1_TryLockRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.TryLockRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.TryLockResponse> __Marshaller_spec_proto_runtime_v1_TryLockResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.TryLockResponse.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.UnlockRequest> __Marshaller_spec_proto_runtime_v1_UnlockRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.UnlockRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.UnlockResponse> __Marshaller_spec_proto_runtime_v1_UnlockResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.UnlockResponse.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.GetNextIdRequest> __Marshaller_spec_proto_runtime_v1_GetNextIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.GetNextIdRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.GetNextIdResponse> __Marshaller_spec_proto_runtime_v1_GetNextIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.GetNextIdResponse.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.GetStateRequest> __Marshaller_spec_proto_runtime_v1_GetStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.GetStateRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.GetStateResponse> __Marshaller_spec_proto_runtime_v1_GetStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.GetStateResponse.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.GetBulkStateRequest> __Marshaller_spec_proto_runtime_v1_GetBulkStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.GetBulkStateRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.GetBulkStateResponse> __Marshaller_spec_proto_runtime_v1_GetBulkStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.GetBulkStateResponse.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.SaveStateRequest> __Marshaller_spec_proto_runtime_v1_SaveStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.SaveStateRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.DeleteStateRequest> __Marshaller_spec_proto_runtime_v1_DeleteStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.DeleteStateRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.DeleteBulkStateRequest> __Marshaller_spec_proto_runtime_v1_DeleteBulkStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.DeleteBulkStateRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.ExecuteStateTransactionRequest> __Marshaller_spec_proto_runtime_v1_ExecuteStateTransactionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.ExecuteStateTransactionRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.PublishEventRequest> __Marshaller_spec_proto_runtime_v1_PublishEventRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.PublishEventRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.GetFileRequest> __Marshaller_spec_proto_runtime_v1_GetFileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.GetFileRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.GetFileResponse> __Marshaller_spec_proto_runtime_v1_GetFileResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.GetFileResponse.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.PutFileRequest> __Marshaller_spec_proto_runtime_v1_PutFileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.PutFileRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.ListFileRequest> __Marshaller_spec_proto_runtime_v1_ListFileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.ListFileRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.ListFileResp> __Marshaller_spec_proto_runtime_v1_ListFileResp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.ListFileResp.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.DelFileRequest> __Marshaller_spec_proto_runtime_v1_DelFileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.DelFileRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.GetFileMetaRequest> __Marshaller_spec_proto_runtime_v1_GetFileMetaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.GetFileMetaRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.GetFileMetaResponse> __Marshaller_spec_proto_runtime_v1_GetFileMetaResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.GetFileMetaResponse.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.InvokeBindingRequest> __Marshaller_spec_proto_runtime_v1_InvokeBindingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.InvokeBindingRequest.Parser));
    static readonly grpc::Marshaller<global::Layotto.Protocol.InvokeBindingResponse> __Marshaller_spec_proto_runtime_v1_InvokeBindingResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Layotto.Protocol.InvokeBindingResponse.Parser));

    static readonly grpc::Method<global::Layotto.Protocol.SayHelloRequest, global::Layotto.Protocol.SayHelloResponse> __Method_SayHello = new grpc::Method<global::Layotto.Protocol.SayHelloRequest, global::Layotto.Protocol.SayHelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SayHello",
        __Marshaller_spec_proto_runtime_v1_SayHelloRequest,
        __Marshaller_spec_proto_runtime_v1_SayHelloResponse);

    static readonly grpc::Method<global::Layotto.Protocol.InvokeServiceRequest, global::Layotto.Protocol.InvokeResponse> __Method_InvokeService = new grpc::Method<global::Layotto.Protocol.InvokeServiceRequest, global::Layotto.Protocol.InvokeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InvokeService",
        __Marshaller_spec_proto_runtime_v1_InvokeServiceRequest,
        __Marshaller_spec_proto_runtime_v1_InvokeResponse);

    static readonly grpc::Method<global::Layotto.Protocol.GetConfigurationRequest, global::Layotto.Protocol.GetConfigurationResponse> __Method_GetConfiguration = new grpc::Method<global::Layotto.Protocol.GetConfigurationRequest, global::Layotto.Protocol.GetConfigurationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConfiguration",
        __Marshaller_spec_proto_runtime_v1_GetConfigurationRequest,
        __Marshaller_spec_proto_runtime_v1_GetConfigurationResponse);

    static readonly grpc::Method<global::Layotto.Protocol.SaveConfigurationRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SaveConfiguration = new grpc::Method<global::Layotto.Protocol.SaveConfigurationRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SaveConfiguration",
        __Marshaller_spec_proto_runtime_v1_SaveConfigurationRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Layotto.Protocol.DeleteConfigurationRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteConfiguration = new grpc::Method<global::Layotto.Protocol.DeleteConfigurationRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteConfiguration",
        __Marshaller_spec_proto_runtime_v1_DeleteConfigurationRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Layotto.Protocol.SubscribeConfigurationRequest, global::Layotto.Protocol.SubscribeConfigurationResponse> __Method_SubscribeConfiguration = new grpc::Method<global::Layotto.Protocol.SubscribeConfigurationRequest, global::Layotto.Protocol.SubscribeConfigurationResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "SubscribeConfiguration",
        __Marshaller_spec_proto_runtime_v1_SubscribeConfigurationRequest,
        __Marshaller_spec_proto_runtime_v1_SubscribeConfigurationResponse);

    static readonly grpc::Method<global::Layotto.Protocol.TryLockRequest, global::Layotto.Protocol.TryLockResponse> __Method_TryLock = new grpc::Method<global::Layotto.Protocol.TryLockRequest, global::Layotto.Protocol.TryLockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TryLock",
        __Marshaller_spec_proto_runtime_v1_TryLockRequest,
        __Marshaller_spec_proto_runtime_v1_TryLockResponse);

    static readonly grpc::Method<global::Layotto.Protocol.UnlockRequest, global::Layotto.Protocol.UnlockResponse> __Method_Unlock = new grpc::Method<global::Layotto.Protocol.UnlockRequest, global::Layotto.Protocol.UnlockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Unlock",
        __Marshaller_spec_proto_runtime_v1_UnlockRequest,
        __Marshaller_spec_proto_runtime_v1_UnlockResponse);

    static readonly grpc::Method<global::Layotto.Protocol.GetNextIdRequest, global::Layotto.Protocol.GetNextIdResponse> __Method_GetNextId = new grpc::Method<global::Layotto.Protocol.GetNextIdRequest, global::Layotto.Protocol.GetNextIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNextId",
        __Marshaller_spec_proto_runtime_v1_GetNextIdRequest,
        __Marshaller_spec_proto_runtime_v1_GetNextIdResponse);

    static readonly grpc::Method<global::Layotto.Protocol.GetStateRequest, global::Layotto.Protocol.GetStateResponse> __Method_GetState = new grpc::Method<global::Layotto.Protocol.GetStateRequest, global::Layotto.Protocol.GetStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetState",
        __Marshaller_spec_proto_runtime_v1_GetStateRequest,
        __Marshaller_spec_proto_runtime_v1_GetStateResponse);

    static readonly grpc::Method<global::Layotto.Protocol.GetBulkStateRequest, global::Layotto.Protocol.GetBulkStateResponse> __Method_GetBulkState = new grpc::Method<global::Layotto.Protocol.GetBulkStateRequest, global::Layotto.Protocol.GetBulkStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBulkState",
        __Marshaller_spec_proto_runtime_v1_GetBulkStateRequest,
        __Marshaller_spec_proto_runtime_v1_GetBulkStateResponse);

    static readonly grpc::Method<global::Layotto.Protocol.SaveStateRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SaveState = new grpc::Method<global::Layotto.Protocol.SaveStateRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SaveState",
        __Marshaller_spec_proto_runtime_v1_SaveStateRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Layotto.Protocol.DeleteStateRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteState = new grpc::Method<global::Layotto.Protocol.DeleteStateRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteState",
        __Marshaller_spec_proto_runtime_v1_DeleteStateRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Layotto.Protocol.DeleteBulkStateRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteBulkState = new grpc::Method<global::Layotto.Protocol.DeleteBulkStateRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteBulkState",
        __Marshaller_spec_proto_runtime_v1_DeleteBulkStateRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Layotto.Protocol.ExecuteStateTransactionRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_ExecuteStateTransaction = new grpc::Method<global::Layotto.Protocol.ExecuteStateTransactionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecuteStateTransaction",
        __Marshaller_spec_proto_runtime_v1_ExecuteStateTransactionRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Layotto.Protocol.PublishEventRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_PublishEvent = new grpc::Method<global::Layotto.Protocol.PublishEventRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PublishEvent",
        __Marshaller_spec_proto_runtime_v1_PublishEventRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Layotto.Protocol.GetFileRequest, global::Layotto.Protocol.GetFileResponse> __Method_GetFile = new grpc::Method<global::Layotto.Protocol.GetFileRequest, global::Layotto.Protocol.GetFileResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetFile",
        __Marshaller_spec_proto_runtime_v1_GetFileRequest,
        __Marshaller_spec_proto_runtime_v1_GetFileResponse);

    static readonly grpc::Method<global::Layotto.Protocol.PutFileRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_PutFile = new grpc::Method<global::Layotto.Protocol.PutFileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "PutFile",
        __Marshaller_spec_proto_runtime_v1_PutFileRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Layotto.Protocol.ListFileRequest, global::Layotto.Protocol.ListFileResp> __Method_ListFile = new grpc::Method<global::Layotto.Protocol.ListFileRequest, global::Layotto.Protocol.ListFileResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListFile",
        __Marshaller_spec_proto_runtime_v1_ListFileRequest,
        __Marshaller_spec_proto_runtime_v1_ListFileResp);

    static readonly grpc::Method<global::Layotto.Protocol.DelFileRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DelFile = new grpc::Method<global::Layotto.Protocol.DelFileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DelFile",
        __Marshaller_spec_proto_runtime_v1_DelFileRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Layotto.Protocol.GetFileMetaRequest, global::Layotto.Protocol.GetFileMetaResponse> __Method_GetFileMeta = new grpc::Method<global::Layotto.Protocol.GetFileMetaRequest, global::Layotto.Protocol.GetFileMetaResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFileMeta",
        __Marshaller_spec_proto_runtime_v1_GetFileMetaRequest,
        __Marshaller_spec_proto_runtime_v1_GetFileMetaResponse);

    static readonly grpc::Method<global::Layotto.Protocol.InvokeBindingRequest, global::Layotto.Protocol.InvokeBindingResponse> __Method_InvokeBinding = new grpc::Method<global::Layotto.Protocol.InvokeBindingRequest, global::Layotto.Protocol.InvokeBindingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InvokeBinding",
        __Marshaller_spec_proto_runtime_v1_InvokeBindingRequest,
        __Marshaller_spec_proto_runtime_v1_InvokeBindingResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Layotto.Protocol.RuntimeReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Runtime</summary>
    [grpc::BindServiceMethod(typeof(Runtime), "BindService")]
    public abstract partial class RuntimeBase
    {
      /// <summary>
      ///SayHello used for test
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Layotto.Protocol.SayHelloResponse> SayHello(global::Layotto.Protocol.SayHelloRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// InvokeService do rpc calls
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Layotto.Protocol.InvokeResponse> InvokeService(global::Layotto.Protocol.InvokeServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetConfiguration gets configuration from configuration store.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Layotto.Protocol.GetConfigurationResponse> GetConfiguration(global::Layotto.Protocol.GetConfigurationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SaveConfiguration saves configuration into configuration store.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> SaveConfiguration(global::Layotto.Protocol.SaveConfigurationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteConfiguration deletes configuration from configuration store.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteConfiguration(global::Layotto.Protocol.DeleteConfigurationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SubscribeConfiguration gets configuration from configuration store and subscribe the updates.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SubscribeConfiguration(grpc::IAsyncStreamReader<global::Layotto.Protocol.SubscribeConfigurationRequest> requestStream, grpc::IServerStreamWriter<global::Layotto.Protocol.SubscribeConfigurationResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Distributed Lock API
      /// A non-blocking method trying to get a lock with ttl.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Layotto.Protocol.TryLockResponse> TryLock(global::Layotto.Protocol.TryLockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Layotto.Protocol.UnlockResponse> Unlock(global::Layotto.Protocol.UnlockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sequencer API
      /// Get next unique id with some auto-increment guarantee
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Layotto.Protocol.GetNextIdResponse> GetNextId(global::Layotto.Protocol.GetNextIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the state for a specific key.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Layotto.Protocol.GetStateResponse> GetState(global::Layotto.Protocol.GetStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a bulk of state items for a list of keys
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Layotto.Protocol.GetBulkStateResponse> GetBulkState(global::Layotto.Protocol.GetBulkStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Saves an array of state objects
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> SaveState(global::Layotto.Protocol.SaveStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the state for a specific key.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteState(global::Layotto.Protocol.DeleteStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a bulk of state items for a list of keys
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBulkState(global::Layotto.Protocol.DeleteBulkStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Executes transactions for a specified store
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> ExecuteStateTransaction(global::Layotto.Protocol.ExecuteStateTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Publishes events to the specific topic
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> PublishEvent(global::Layotto.Protocol.PublishEventRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get file with stream
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetFile(global::Layotto.Protocol.GetFileRequest request, grpc::IServerStreamWriter<global::Layotto.Protocol.GetFileResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Put file with stream
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> PutFile(grpc::IAsyncStreamReader<global::Layotto.Protocol.PutFileRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all files
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Layotto.Protocol.ListFileResp> ListFile(global::Layotto.Protocol.ListFileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete specific file
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DelFile(global::Layotto.Protocol.DelFileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get file meta data, if file not exist,return code.NotFound error
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Layotto.Protocol.GetFileMetaResponse> GetFileMeta(global::Layotto.Protocol.GetFileMetaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Invokes binding data to specific output bindings
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Layotto.Protocol.InvokeBindingResponse> InvokeBinding(global::Layotto.Protocol.InvokeBindingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Runtime</summary>
    public partial class RuntimeClient : grpc::ClientBase<RuntimeClient>
    {
      /// <summary>Creates a new client for Runtime</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RuntimeClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Runtime that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RuntimeClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RuntimeClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RuntimeClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///SayHello used for test
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.SayHelloResponse SayHello(global::Layotto.Protocol.SayHelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///SayHello used for test
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.SayHelloResponse SayHello(global::Layotto.Protocol.SayHelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SayHello, null, options, request);
      }
      /// <summary>
      ///SayHello used for test
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.SayHelloResponse> SayHelloAsync(global::Layotto.Protocol.SayHelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///SayHello used for test
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.SayHelloResponse> SayHelloAsync(global::Layotto.Protocol.SayHelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SayHello, null, options, request);
      }
      /// <summary>
      /// InvokeService do rpc calls
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.InvokeResponse InvokeService(global::Layotto.Protocol.InvokeServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InvokeService(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// InvokeService do rpc calls
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.InvokeResponse InvokeService(global::Layotto.Protocol.InvokeServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InvokeService, null, options, request);
      }
      /// <summary>
      /// InvokeService do rpc calls
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.InvokeResponse> InvokeServiceAsync(global::Layotto.Protocol.InvokeServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InvokeServiceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// InvokeService do rpc calls
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.InvokeResponse> InvokeServiceAsync(global::Layotto.Protocol.InvokeServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InvokeService, null, options, request);
      }
      /// <summary>
      /// GetConfiguration gets configuration from configuration store.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.GetConfigurationResponse GetConfiguration(global::Layotto.Protocol.GetConfigurationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConfiguration(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetConfiguration gets configuration from configuration store.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.GetConfigurationResponse GetConfiguration(global::Layotto.Protocol.GetConfigurationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConfiguration, null, options, request);
      }
      /// <summary>
      /// GetConfiguration gets configuration from configuration store.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.GetConfigurationResponse> GetConfigurationAsync(global::Layotto.Protocol.GetConfigurationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConfigurationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetConfiguration gets configuration from configuration store.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.GetConfigurationResponse> GetConfigurationAsync(global::Layotto.Protocol.GetConfigurationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConfiguration, null, options, request);
      }
      /// <summary>
      /// SaveConfiguration saves configuration into configuration store.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SaveConfiguration(global::Layotto.Protocol.SaveConfigurationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveConfiguration(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SaveConfiguration saves configuration into configuration store.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SaveConfiguration(global::Layotto.Protocol.SaveConfigurationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SaveConfiguration, null, options, request);
      }
      /// <summary>
      /// SaveConfiguration saves configuration into configuration store.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SaveConfigurationAsync(global::Layotto.Protocol.SaveConfigurationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveConfigurationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SaveConfiguration saves configuration into configuration store.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SaveConfigurationAsync(global::Layotto.Protocol.SaveConfigurationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SaveConfiguration, null, options, request);
      }
      /// <summary>
      /// DeleteConfiguration deletes configuration from configuration store.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteConfiguration(global::Layotto.Protocol.DeleteConfigurationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConfiguration(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteConfiguration deletes configuration from configuration store.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteConfiguration(global::Layotto.Protocol.DeleteConfigurationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteConfiguration, null, options, request);
      }
      /// <summary>
      /// DeleteConfiguration deletes configuration from configuration store.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteConfigurationAsync(global::Layotto.Protocol.DeleteConfigurationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConfigurationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteConfiguration deletes configuration from configuration store.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteConfigurationAsync(global::Layotto.Protocol.DeleteConfigurationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteConfiguration, null, options, request);
      }
      /// <summary>
      /// SubscribeConfiguration gets configuration from configuration store and subscribe the updates.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Layotto.Protocol.SubscribeConfigurationRequest, global::Layotto.Protocol.SubscribeConfigurationResponse> SubscribeConfiguration(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeConfiguration(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SubscribeConfiguration gets configuration from configuration store and subscribe the updates.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Layotto.Protocol.SubscribeConfigurationRequest, global::Layotto.Protocol.SubscribeConfigurationResponse> SubscribeConfiguration(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_SubscribeConfiguration, null, options);
      }
      /// <summary>
      /// Distributed Lock API
      /// A non-blocking method trying to get a lock with ttl.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.TryLockResponse TryLock(global::Layotto.Protocol.TryLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TryLock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Distributed Lock API
      /// A non-blocking method trying to get a lock with ttl.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.TryLockResponse TryLock(global::Layotto.Protocol.TryLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TryLock, null, options, request);
      }
      /// <summary>
      /// Distributed Lock API
      /// A non-blocking method trying to get a lock with ttl.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.TryLockResponse> TryLockAsync(global::Layotto.Protocol.TryLockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TryLockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Distributed Lock API
      /// A non-blocking method trying to get a lock with ttl.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.TryLockResponse> TryLockAsync(global::Layotto.Protocol.TryLockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TryLock, null, options, request);
      }
      public virtual global::Layotto.Protocol.UnlockResponse Unlock(global::Layotto.Protocol.UnlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Unlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Layotto.Protocol.UnlockResponse Unlock(global::Layotto.Protocol.UnlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Unlock, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.UnlockResponse> UnlockAsync(global::Layotto.Protocol.UnlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.UnlockResponse> UnlockAsync(global::Layotto.Protocol.UnlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Unlock, null, options, request);
      }
      /// <summary>
      /// Sequencer API
      /// Get next unique id with some auto-increment guarantee
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.GetNextIdResponse GetNextId(global::Layotto.Protocol.GetNextIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNextId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sequencer API
      /// Get next unique id with some auto-increment guarantee
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.GetNextIdResponse GetNextId(global::Layotto.Protocol.GetNextIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNextId, null, options, request);
      }
      /// <summary>
      /// Sequencer API
      /// Get next unique id with some auto-increment guarantee
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.GetNextIdResponse> GetNextIdAsync(global::Layotto.Protocol.GetNextIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNextIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sequencer API
      /// Get next unique id with some auto-increment guarantee
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.GetNextIdResponse> GetNextIdAsync(global::Layotto.Protocol.GetNextIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNextId, null, options, request);
      }
      /// <summary>
      /// Gets the state for a specific key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.GetStateResponse GetState(global::Layotto.Protocol.GetStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the state for a specific key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.GetStateResponse GetState(global::Layotto.Protocol.GetStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetState, null, options, request);
      }
      /// <summary>
      /// Gets the state for a specific key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.GetStateResponse> GetStateAsync(global::Layotto.Protocol.GetStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the state for a specific key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.GetStateResponse> GetStateAsync(global::Layotto.Protocol.GetStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetState, null, options, request);
      }
      /// <summary>
      /// Gets a bulk of state items for a list of keys
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.GetBulkStateResponse GetBulkState(global::Layotto.Protocol.GetBulkStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBulkState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a bulk of state items for a list of keys
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.GetBulkStateResponse GetBulkState(global::Layotto.Protocol.GetBulkStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBulkState, null, options, request);
      }
      /// <summary>
      /// Gets a bulk of state items for a list of keys
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.GetBulkStateResponse> GetBulkStateAsync(global::Layotto.Protocol.GetBulkStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBulkStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a bulk of state items for a list of keys
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.GetBulkStateResponse> GetBulkStateAsync(global::Layotto.Protocol.GetBulkStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBulkState, null, options, request);
      }
      /// <summary>
      /// Saves an array of state objects
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SaveState(global::Layotto.Protocol.SaveStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Saves an array of state objects
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SaveState(global::Layotto.Protocol.SaveStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SaveState, null, options, request);
      }
      /// <summary>
      /// Saves an array of state objects
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SaveStateAsync(global::Layotto.Protocol.SaveStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Saves an array of state objects
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SaveStateAsync(global::Layotto.Protocol.SaveStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SaveState, null, options, request);
      }
      /// <summary>
      /// Deletes the state for a specific key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteState(global::Layotto.Protocol.DeleteStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the state for a specific key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteState(global::Layotto.Protocol.DeleteStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteState, null, options, request);
      }
      /// <summary>
      /// Deletes the state for a specific key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteStateAsync(global::Layotto.Protocol.DeleteStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the state for a specific key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteStateAsync(global::Layotto.Protocol.DeleteStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteState, null, options, request);
      }
      /// <summary>
      /// Deletes a bulk of state items for a list of keys
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteBulkState(global::Layotto.Protocol.DeleteBulkStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBulkState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a bulk of state items for a list of keys
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteBulkState(global::Layotto.Protocol.DeleteBulkStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteBulkState, null, options, request);
      }
      /// <summary>
      /// Deletes a bulk of state items for a list of keys
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBulkStateAsync(global::Layotto.Protocol.DeleteBulkStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBulkStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a bulk of state items for a list of keys
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBulkStateAsync(global::Layotto.Protocol.DeleteBulkStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteBulkState, null, options, request);
      }
      /// <summary>
      /// Executes transactions for a specified store
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ExecuteStateTransaction(global::Layotto.Protocol.ExecuteStateTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteStateTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes transactions for a specified store
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ExecuteStateTransaction(global::Layotto.Protocol.ExecuteStateTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecuteStateTransaction, null, options, request);
      }
      /// <summary>
      /// Executes transactions for a specified store
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ExecuteStateTransactionAsync(global::Layotto.Protocol.ExecuteStateTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteStateTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes transactions for a specified store
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ExecuteStateTransactionAsync(global::Layotto.Protocol.ExecuteStateTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecuteStateTransaction, null, options, request);
      }
      /// <summary>
      /// Publishes events to the specific topic
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty PublishEvent(global::Layotto.Protocol.PublishEventRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PublishEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Publishes events to the specific topic
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty PublishEvent(global::Layotto.Protocol.PublishEventRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PublishEvent, null, options, request);
      }
      /// <summary>
      /// Publishes events to the specific topic
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> PublishEventAsync(global::Layotto.Protocol.PublishEventRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PublishEventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Publishes events to the specific topic
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> PublishEventAsync(global::Layotto.Protocol.PublishEventRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PublishEvent, null, options, request);
      }
      /// <summary>
      /// Get file with stream
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Layotto.Protocol.GetFileResponse> GetFile(global::Layotto.Protocol.GetFileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get file with stream
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Layotto.Protocol.GetFileResponse> GetFile(global::Layotto.Protocol.GetFileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetFile, null, options, request);
      }
      /// <summary>
      /// Put file with stream
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Layotto.Protocol.PutFileRequest, global::Google.Protobuf.WellKnownTypes.Empty> PutFile(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutFile(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Put file with stream
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Layotto.Protocol.PutFileRequest, global::Google.Protobuf.WellKnownTypes.Empty> PutFile(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_PutFile, null, options);
      }
      /// <summary>
      /// List all files
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.ListFileResp ListFile(global::Layotto.Protocol.ListFileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all files
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.ListFileResp ListFile(global::Layotto.Protocol.ListFileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListFile, null, options, request);
      }
      /// <summary>
      /// List all files
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.ListFileResp> ListFileAsync(global::Layotto.Protocol.ListFileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all files
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.ListFileResp> ListFileAsync(global::Layotto.Protocol.ListFileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListFile, null, options, request);
      }
      /// <summary>
      /// Delete specific file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DelFile(global::Layotto.Protocol.DelFileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DelFile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete specific file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DelFile(global::Layotto.Protocol.DelFileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DelFile, null, options, request);
      }
      /// <summary>
      /// Delete specific file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DelFileAsync(global::Layotto.Protocol.DelFileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DelFileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete specific file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DelFileAsync(global::Layotto.Protocol.DelFileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DelFile, null, options, request);
      }
      /// <summary>
      /// Get file meta data, if file not exist,return code.NotFound error
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.GetFileMetaResponse GetFileMeta(global::Layotto.Protocol.GetFileMetaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFileMeta(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get file meta data, if file not exist,return code.NotFound error
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.GetFileMetaResponse GetFileMeta(global::Layotto.Protocol.GetFileMetaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFileMeta, null, options, request);
      }
      /// <summary>
      /// Get file meta data, if file not exist,return code.NotFound error
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.GetFileMetaResponse> GetFileMetaAsync(global::Layotto.Protocol.GetFileMetaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFileMetaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get file meta data, if file not exist,return code.NotFound error
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.GetFileMetaResponse> GetFileMetaAsync(global::Layotto.Protocol.GetFileMetaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFileMeta, null, options, request);
      }
      /// <summary>
      /// Invokes binding data to specific output bindings
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.InvokeBindingResponse InvokeBinding(global::Layotto.Protocol.InvokeBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InvokeBinding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Invokes binding data to specific output bindings
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Layotto.Protocol.InvokeBindingResponse InvokeBinding(global::Layotto.Protocol.InvokeBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InvokeBinding, null, options, request);
      }
      /// <summary>
      /// Invokes binding data to specific output bindings
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.InvokeBindingResponse> InvokeBindingAsync(global::Layotto.Protocol.InvokeBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InvokeBindingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Invokes binding data to specific output bindings
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Layotto.Protocol.InvokeBindingResponse> InvokeBindingAsync(global::Layotto.Protocol.InvokeBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InvokeBinding, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RuntimeClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RuntimeClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RuntimeBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SayHello, serviceImpl.SayHello)
          .AddMethod(__Method_InvokeService, serviceImpl.InvokeService)
          .AddMethod(__Method_GetConfiguration, serviceImpl.GetConfiguration)
          .AddMethod(__Method_SaveConfiguration, serviceImpl.SaveConfiguration)
          .AddMethod(__Method_DeleteConfiguration, serviceImpl.DeleteConfiguration)
          .AddMethod(__Method_SubscribeConfiguration, serviceImpl.SubscribeConfiguration)
          .AddMethod(__Method_TryLock, serviceImpl.TryLock)
          .AddMethod(__Method_Unlock, serviceImpl.Unlock)
          .AddMethod(__Method_GetNextId, serviceImpl.GetNextId)
          .AddMethod(__Method_GetState, serviceImpl.GetState)
          .AddMethod(__Method_GetBulkState, serviceImpl.GetBulkState)
          .AddMethod(__Method_SaveState, serviceImpl.SaveState)
          .AddMethod(__Method_DeleteState, serviceImpl.DeleteState)
          .AddMethod(__Method_DeleteBulkState, serviceImpl.DeleteBulkState)
          .AddMethod(__Method_ExecuteStateTransaction, serviceImpl.ExecuteStateTransaction)
          .AddMethod(__Method_PublishEvent, serviceImpl.PublishEvent)
          .AddMethod(__Method_GetFile, serviceImpl.GetFile)
          .AddMethod(__Method_PutFile, serviceImpl.PutFile)
          .AddMethod(__Method_ListFile, serviceImpl.ListFile)
          .AddMethod(__Method_DelFile, serviceImpl.DelFile)
          .AddMethod(__Method_GetFileMeta, serviceImpl.GetFileMeta)
          .AddMethod(__Method_InvokeBinding, serviceImpl.InvokeBinding).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RuntimeBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SayHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.SayHelloRequest, global::Layotto.Protocol.SayHelloResponse>(serviceImpl.SayHello));
      serviceBinder.AddMethod(__Method_InvokeService, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.InvokeServiceRequest, global::Layotto.Protocol.InvokeResponse>(serviceImpl.InvokeService));
      serviceBinder.AddMethod(__Method_GetConfiguration, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.GetConfigurationRequest, global::Layotto.Protocol.GetConfigurationResponse>(serviceImpl.GetConfiguration));
      serviceBinder.AddMethod(__Method_SaveConfiguration, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.SaveConfigurationRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.SaveConfiguration));
      serviceBinder.AddMethod(__Method_DeleteConfiguration, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.DeleteConfigurationRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteConfiguration));
      serviceBinder.AddMethod(__Method_SubscribeConfiguration, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Layotto.Protocol.SubscribeConfigurationRequest, global::Layotto.Protocol.SubscribeConfigurationResponse>(serviceImpl.SubscribeConfiguration));
      serviceBinder.AddMethod(__Method_TryLock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.TryLockRequest, global::Layotto.Protocol.TryLockResponse>(serviceImpl.TryLock));
      serviceBinder.AddMethod(__Method_Unlock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.UnlockRequest, global::Layotto.Protocol.UnlockResponse>(serviceImpl.Unlock));
      serviceBinder.AddMethod(__Method_GetNextId, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.GetNextIdRequest, global::Layotto.Protocol.GetNextIdResponse>(serviceImpl.GetNextId));
      serviceBinder.AddMethod(__Method_GetState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.GetStateRequest, global::Layotto.Protocol.GetStateResponse>(serviceImpl.GetState));
      serviceBinder.AddMethod(__Method_GetBulkState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.GetBulkStateRequest, global::Layotto.Protocol.GetBulkStateResponse>(serviceImpl.GetBulkState));
      serviceBinder.AddMethod(__Method_SaveState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.SaveStateRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.SaveState));
      serviceBinder.AddMethod(__Method_DeleteState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.DeleteStateRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteState));
      serviceBinder.AddMethod(__Method_DeleteBulkState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.DeleteBulkStateRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteBulkState));
      serviceBinder.AddMethod(__Method_ExecuteStateTransaction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.ExecuteStateTransactionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.ExecuteStateTransaction));
      serviceBinder.AddMethod(__Method_PublishEvent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.PublishEventRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.PublishEvent));
      serviceBinder.AddMethod(__Method_GetFile, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Layotto.Protocol.GetFileRequest, global::Layotto.Protocol.GetFileResponse>(serviceImpl.GetFile));
      serviceBinder.AddMethod(__Method_PutFile, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Layotto.Protocol.PutFileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.PutFile));
      serviceBinder.AddMethod(__Method_ListFile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.ListFileRequest, global::Layotto.Protocol.ListFileResp>(serviceImpl.ListFile));
      serviceBinder.AddMethod(__Method_DelFile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.DelFileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DelFile));
      serviceBinder.AddMethod(__Method_GetFileMeta, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.GetFileMetaRequest, global::Layotto.Protocol.GetFileMetaResponse>(serviceImpl.GetFileMeta));
      serviceBinder.AddMethod(__Method_InvokeBinding, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Layotto.Protocol.InvokeBindingRequest, global::Layotto.Protocol.InvokeBindingResponse>(serviceImpl.InvokeBinding));
    }

  }
}
#endregion
